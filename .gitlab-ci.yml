---
stages:
  - pre-check
  - test
  - check
  - build
  - publish
  - clean up

.run_tox_tests_no_greenlets: &run_tox_tests_no_greenlets
  image: python:$PYTHON-alpine
  stage: test
  cache:
    key: $CI_JOB_NAME
    paths:
      - .tox/
  script:
    - pip install tox
    - tox -e system-unit
  only:
    changes:
      - xotl/tools/**/*.py
      - tests/**/*.py
      - xoutil/**/*.py
      - setup.py
      - setup.cfg
      - tox.ini
      - .gitlab-ci.yml

.run_tox_tests_with_greenlets: &run_tox_tests_with_greenlets
  image: python:$PYTHON
  stage: test
  cache:
    key: $CI_JOB_NAME
    paths:
      - .tox/
  script:
    - pip install tox
    - tox -e system-greenlets


run all Python 3.8 tests without greenlets:
  <<: *run_tox_tests_no_greenlets
  variables:
    PYTHON: "3.8"
  only:
    - master
    - /^releases-2/
    - merge_requests

run all Python 3.8 tests with greenlets:
  <<: *run_tox_tests_with_greenlets
  variables:
    PYTHON: "3.8"
  only:
    - master
    - /^releases-2/
    - merge_requests

run all Python 3.9 tests without greenlets:
  <<: *run_tox_tests_no_greenlets
  variables:
    PYTHON: "3.9"
  allow_failure: true
  only:
    - master
    - /^releases-2/
    - merge_requests


run all Python 3.9 tests with greenlets:
  <<: *run_tox_tests_with_greenlets
  variables:
    PYTHON: "3.9"
  allow_failure: true
  only:
    - master
    - /^releases-2/
    - merge_requests


run all Python 3.6 tests without greenlets:
  <<: *run_tox_tests_no_greenlets
  variables:
    PYTHON: "3.6"
  only:
    - master
    - /^releases-2/
    - merge_requests

run all Python 3.6 tests with greenlets:
  <<: *run_tox_tests_with_greenlets
  variables:
    PYTHON: "3.6"
  only:
    - master
    - /^releases-2/
    - merge_requests


run all Python 3.7 tests without greenlets:
  <<: *run_tox_tests_no_greenlets
  variables:
    PYTHON: "3.7"
  only:
    - master
    - /^releases-2/
    - merge_requests

run all Python 3.7 tests with greenlets:
  <<: *run_tox_tests_with_greenlets
  variables:
    PYTHON: "3.7"
  only:
    - master
    - /^releases-2/
    - merge_requests


build source distribution:
  image: python:3.8-alpine
  stage: build
  script:
    - apk add git
    - python setup.py sdist
    - PROJECT_NAME=xoutil python3 setup.py sdist
  artifacts:
    paths:
      - dist/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+|\.dev\d+)?$/


build binary distribution:
  image: python:3.8-alpine
  stage: build
  script:
    - apk add git
    - python3 setup.py bdist_wheel
    - PROJECT_NAME=xoutil python3 setup.py bdist_wheel
  artifacts:
    expire_in: 4 hours
    paths:
      - dist/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+|\.dev\d+)?$/

check signature of tag:
  image: alpine
  stage: check
  script:
    - apk add gnupg git
    - cat $GNUPG_KEY_FILE | gpg --import
    - git verify-tag $CI_COMMIT_REF_NAME
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+|\.dev\d+)?$/


publish in pypi:
  image: python:3.8
  variables:
    GIT_STRATEGY: none
  stage: publish
  script:
    - pip install twine
    - twine upload --skip-existing -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+)?$/
  needs:
    - check signature of tag
    - build source distribution
    - build binary distribution
  environment:
    name: pypi
    url: https://pypi.org/project/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME


build documentation:
  image: python:3.8-alpine
  stage: build
  cache:
    key: docs-${CI_COMMIT_REF_SLUG}
    paths:
      - docs/builds/
  script:
    - apk add make git
    - pip install sphinx sphinx-rtd-theme
    - pip install -e .
    - make -C docs/ html
  artifacts:
    paths:
      - docs/build/html
    expire_in: 4 days
  needs: []
  only:
    - tags
    - /^releases-/
    - master
    - merge_requests

publish in our rtd:
  image: alpine
  variables:
    GIT_STRATEGY: none
  stage: publish
  script:
    - |
      apk add openssh rsync
      mkdir -p $HOME/.ssh
      chmod 700 $HOME/.ssh
      cp $RSA_KEY_FILE $HOME/.ssh/id_rsa
      chmod 600 $HOME/.ssh/id_rsa
      cp $SSH_CONFIG_FILE $HOME/.ssh/config
      ssh docs.lahavane.com mkdir -p /data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA
      rsync -auvp -e ssh ./docs/build/html/ docs.lahavane.com:/data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA/
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; rm -r $CI_COMMIT_REF_NAME; ln -s .$CI_COMMIT_SHA $CI_COMMIT_REF_NAME"
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; ls -al | grep -oE '\.([0-9]|[a-z])*$' | sort | uniq -c | grep '1 ' | grep -oE '\.([0-9]|[a-z])*$' | xargs rm -rf"
  needs:
    - build documentation
  environment:
    name: docs.lahavane.com
    url: http://docs.lahavane.com/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME
  only:
    - tags
    - /^releases-/
    - master
    - merge_requests

automatically remove MR documentation from our RTD server after 4 hours:
  stage: clean up
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "release-1.9.x"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "release-2.0.x"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "release-2.1.x"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - when: never
  trigger:
    include: ci/cleanup.yml
