#+TITLE: Backlog for *xoutil* - a collection of disparate utilities
#+AUTHOR: Merchise Autrement [~ยบ/~]
#+DESCRIPTION: Development planning for this package.

This file only describe tasks, issues, and ideas strictly related to
development processes.  All backlog items that must be part of this package
documentation could be found in the [[file:docs/source/backlog][backlog]] directory.


* General Ideas. [/]

- [ ] Drop all code for Python 2 only.  Let the xoutil API unchanged in
  2.0.0, but signal deprecation.

- [ ] Implement a new class (which name could be ~AttributeMapper~)
  complementing ~xoutil.future.collections.OpenDictMixin~ in order to have the
  following two extensions:

  - Separate key/identifier mapping in a different aspect allowing to reuse
    this behaviour in several additional open mapping implementations.
    Instances of ~AttributeMapper~ could be used as the ~OpenDictMixin~
    inverted cache as well.

  - Use ~AttributeMapper~ as a decorator of any class to "weave" the open
    mapping behavior:

    #+begin_src python
      from xoutil.future.collections import AttributeMapper as attr_mapper

      # (1) Instances will be open mappings.
      # This is the current behavior when ~OpenDictMixin~ is used now.
      @attr_mapper.weave
      class MyMapping(dict):
          ...

      # (2) Use an inner attribute as the mapping to expose
      @attr_mapper.weave('inner')
      class MyMapping(object):
          def __init__(self, **kwds):
              self.inner = kwds
    #+end_src

- [ ] Rename "encoding" by "coding" in all =# -*- encoding:= headers.

- [ ] Review 'xoutil.cli'.

  See IPython's [[file:~/.local/lib/python2.7/site-packages/IPython/terminal/ipapp.py::addflag%20%3D%20lambda%20*args:%20frontend_flags.update(boolean_flag(*args))][addflag]].  Migrate the logic for sub-commands in 'argparse' by
  using [[file:/usr/share/doc/python/html/library/argparse.html][add_subparsers]] when define method [[file:xoutil/cli/__init__.py::def%20get_arg_parser(cls):][get_arg_parser]] for sub-classes of
  [[file:xoutil/cli/__init__.py::class%20Command(ABC):][xoutil.cli.Command]].

- [ ] Integrate in only one module 'xoutil.validators' and 'xoutil.values'.

- [ ] 'xoutil.fp' must assume all functionalities related to most pure
  functional programming.

- [ ] Review 'xoutil.params'.

  Optimize current features; and create a decorator as a pre-condition for
  parameter validation:

  #+begin_src python
    import sys
    from xoutil.eight import string_types
    from xoutil.values import file_coerce as is_file
    from xoutil.values import positive_int_coerce as positive_int
    from xoutil.params import require_params, ParamSchemeRow as row

    @require_params(
        row('stream', 0, -1, 'output', default=sys.stdout, coerce=is_file),
        row('indent', 0, 1, default=1, coerce=positive_int),
        row('width', 0, 1, 2, 'max_width', default=79, coerce=positive_int),
        row('newline', default='\n', coerce=string_types))
    def def test(*args, **kwargs):
        ...
  #+end_src

- [ ] Review redundances in several modules (e.g. 'string', 'names',
  'keywords', 'reprlib', 'clipping', 'future.textwrap', 'future.codecs',
  'eight.string', 'eight.text', ...)

- [ ] Review [[file:xoutil/tools.py][xoutil.tools]] in order to find incoherent definictions with newly
  modules.

- [ ] Review and fix 'xoutil.decorator' module.  Get ideas from
  [[https://github.com/dbrattli/OSlash/blob/master/oslash/util/extensionmethod.py][extensionmethod]] from OSlash in order to improve it.

- [ ] Review [[https://github.com/dbrattli/OSlash/blob/master/oslash/util/fn.py][fn]] from OSlash, generalize and integrate our 'compose'.

- [ ] Improve special characters in a wild-carded name.  Python
  'fnmatch.translate' standard function lacks of functionality present in
  most shells (like alternation of comma-separated alternatives); thus,
  ``foo{bar,lish}`` would be matched in 'foobar' or 'foolish'.

- [ ] Use =DeprecationWarning= instead =UserWarning= in module
  [[file:xoutil/deprecation.py][xoutil.deprecation]] (see =warnings.simplefilter('default',
  DeprecationWarning)=).


* Errors

- [ ] =IPython.lib.deepreload.reload= doesn't work with =xoutil= in Python 3:

  #+begin_src python
    from IPython.lib.deepreload import reload as dreload
    import xoutil
    dreload(xoutil)
  #+end_src
